cmake_minimum_required (VERSION 3.10)
PROJECT(FEM C CXX)

option(USE_MPI "Enable MPI" OFF)
if(USE_MPI)
  option(BUILD_MPI "Build MPI" OFF)
endif()

option(USE_CUDA "Enable CUDA" OFF)
if (USE_CUDA)
  set(CUDA_ARCH "sm_61" CACHE STRING "Target CUDA architecture.")
  enable_language(CUDA)
  message(STATUS "Using CUDA architecture: ${CUDA_ARCH}")

  set(CMAKE_CUDA_STANDARD 11)
  set(CMAKE_CUDA_STANDARD_REQUIRED ON)
  set(CMAKE_CUDA_EXTENSIONS OFF)
  set(CMAKE_CUDA_FLAGS "-arch=${CUDA_ARCH} --expt-extended-lambda"
      CACHE STRING "CUDA flags set for MFEM" FORCE)
  if(USE_MPI)
    set(CUDA_CCBIN_COMPILER ${MPI_CXX_COMPILER})
  else()
    set(CUDA_CCBIN_COMPILER ${CMAKE_CXX_COMPILER})
  endif()
  if (NOT MSVC)
    string(APPEND CMAKE_CUDA_FLAGS " -ccbin ${CUDA_CCBIN_COMPILER}")
  endif()
endif()

# Set use compiler flags for configure based projects
set(C_FLAGS ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE})
set(CXX_FLAGS ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE})
# set(Fortran_FLAGS ${CMAKE_Fortran_FLAGS} ${CMAKE_Fortran_FLAGS_RELEASE})
set(EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER} ${CMAKE_EXE_LINKER})

list(APPEND FEM_ARGS "-DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}")
list(APPEND FEM_ARGS "-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
list(APPEND FEM_ARGS "-DCMAKE_AR=${CMAKE_AR}")
list(APPEND FEM_ARGS "-DCMAKE_LINKER=${CMAKE_LINKER}")
list(APPEND FEM_ARGS "-DCMAKE_NM=${CMAKE_NM}")
list(APPEND FEM_ARGS "-DCMAKE_OBJCOPY=${CMAKE_OBJCOPY}")
list(APPEND FEM_ARGS "-DCMAKE_OBJDUMP=${CMAKE_OBJDUMP}")
list(APPEND FEM_ARGS "-DCMAKE_RANLIB=${CMAKE_RANLIB}")
list(APPEND FEM_ARGS "-DCMAKE_STRIP=${CMAKE_STRIP}")
list(APPEND FEM_ARGS "-DCMAKE_EXE_LINKER_FLAGS=${CMAKE_EXE_LINKER_FLAGS}")
list(APPEND FEM_ARGS "-DCMAKE_EXE_LINKER_FLAGS_DEBUG=${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
list(APPEND FEM_ARGS "-DCMAKE_EXE_LINKER_FLAGS_MINSIZEREL=${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL}")
list(APPEND FEM_ARGS "-DCMAKE_EXE_LINKER_FLAGS_RELEASE=${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
list(APPEND FEM_ARGS "-DCMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO=${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}")
list(APPEND FEM_ARGS "-DCMAKE_MODULE_LINKER_FLAGS=${CMAKE_MODULE_LINKER_FLAGS}")
list(APPEND FEM_ARGS "-DCMAKE_MODULE_LINKER_FLAGS_DEBUG=${CMAKE_MODULE_LINKER_FLAGS_DEBUG}")
list(APPEND FEM_ARGS "-DCMAKE_MODULE_LINKER_FLAGS_MINSIZEREL=${CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL}")
list(APPEND FEM_ARGS "-DCMAKE_MODULE_LINKER_FLAGS_RELEASE=${CMAKE_MODULE_LINKER_FLAGS_RELEASE}")
list(APPEND FEM_ARGS "-DCMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO=${CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO}")
list(APPEND FEM_ARGS "-DCMAKE_SHARED_LINKER_FLAGS=${CMAKE_SHARED_LINKER_FLAGS}")
list(APPEND FEM_ARGS "-DCMAKE_SHARED_LINKER_FLAGS_DEBUG=${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
list(APPEND FEM_ARGS "-DCMAKE_SHARED_LINKER_FLAGS_MINSIZEREL=${CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL}")
list(APPEND FEM_ARGS "-DCMAKE_SHARED_LINKER_FLAGS_RELEASE=${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
list(APPEND FEM_ARGS "-DCMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO=${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}")
list(APPEND FEM_ARGS "-DCMAKE_STATIC_LINKER_FLAGS=${CMAKE_STATIC_LINKER_FLAGS}")
list(APPEND FEM_ARGS "-DCMAKE_STATIC_LINKER_FLAGS_DEBUG=${CMAKE_STATIC_LINKER_FLAGS_DEBUG}")
list(APPEND FEM_ARGS "-DCMAKE_STATIC_LINKER_FLAGS_MINSIZEREL=${CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL}")
list(APPEND FEM_ARGS "-DCMAKE_STATIC_LINKER_FLAGS_RELEASE=${CMAKE_STATIC_LINKER_FLAGS_RELEASE}")
list(APPEND FEM_ARGS "-DCMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO=${CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO}")
list(APPEND FEM_ARGS "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
list(APPEND FEM_ARGS "-DCMAKE_C_COMPILER_AR=${CMAKE_C_COMPILER_AR}")
list(APPEND FEM_ARGS "-DCMAKE_C_COMPILER_RANLIB=${CMAKE_C_COMPILER_RANLIB}")
list(APPEND FEM_ARGS "-DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}")
list(APPEND FEM_ARGS "-DCMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG}")
list(APPEND FEM_ARGS "-DCMAKE_C_FLAGS_MINSIZEREL=${CMAKE_C_FLAGS_MINSIZEREL}")
list(APPEND FEM_ARGS "-DCMAKE_C_FLAGS_RELEASE=${CMAKE_C_FLAGS_RELEASE}")
list(APPEND FEM_ARGS "-DCMAKE_C_FLAGS_RELWITHDEBINFO=${CMAKE_C_FLAGS_RELWITHDEBINFO}")
list(APPEND FEM_ARGS "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
list(APPEND FEM_ARGS "-DCMAKE_CXX_COMPILER_AR=${CMAKE_CXX_COMPILER_AR}")
list(APPEND FEM_ARGS "-DCMAKE_CXX_COMPILER_RANLIB=${CMAKE_CXX_COMPILER_RANLIB}")
list(APPEND FEM_ARGS "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")
list(APPEND FEM_ARGS "-DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG}")
list(APPEND FEM_ARGS "-DCMAKE_CXX_FLAGS_MINSIZEREL=${CMAKE_CXX_FLAGS_MINSIZEREL}")
list(APPEND FEM_ARGS "-DCMAKE_CXX_FLAGS_RELEASE=${CMAKE_CXX_FLAGS_RELEASE}")
list(APPEND FEM_ARGS "-DCMAKE_CXX_FLAGS_RELWITHDEBINFO=${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
list(APPEND FEM_ARGS "-DCXX_STANDARD=${CXX_STANDARD}")
# list(APPEND FEM_ARGS "-DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}")
# list(APPEND FEM_ARGS "-DCMAKE_Fortran_COMPILER_AR=${CMAKE_Fortran_COMPILER_AR}")
# list(APPEND FEM_ARGS "-DCMAKE_Fortran_COMPILER_RANLIB=${CMAKE_Fortran_COMPILER_RANLIB}")
# list(APPEND FEM_ARGS "-DCMAKE_Fortran_FLAGS=${CMAKE_Fortran_FLAGS}")
# list(APPEND FEM_ARGS "-DCMAKE_Fortran_FLAGS_DEBUG=${CMAKE_Fortran_FLAGS_DEBUG}")
# list(APPEND FEM_ARGS "-DCMAKE_Fortran_FLAGS_MINSIZEREL=${CMAKE_Fortran_FLAGS_MINSIZEREL}")
# list(APPEND FEM_ARGS "-DCMAKE_Fortran_FLAGS_RELEASE=${CMAKE_Fortran_FLAGS_RELEASE}")
# list(APPEND FEM_ARGS "-DCMAKE_Fortran_FLAGS_RELWITHDEBINFO=${CMAKE_Fortran_FLAGS_RELWITHDEBINFO}")

include(ExternalProject)

set(INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include")

if(USE_MPI)
  if(BUILD_MPI)
    list(APPEND OPENMPI_ARGS "--prefix=${CMAKE_INSTALL_PREFIX}")
    list(APPEND OPENMPI_ARGS "--enable-mpi-cxx")
    # list(APPEND OPENMPI_ARGS "--enable-cxx-exceptions")
    list(APPEND OPENMPI_ARGS "--enable-static")
    list(APPEND OPENMPI_ARGS "--disable-shared")
    list(APPEND OPENMPI_ARGS "CC=${CMAKE_C_COMPILER}")
    list(APPEND OPENMPI_ARGS "CFLAGS=${C_FLAGS}")
    list(APPEND OPENMPI_ARGS "CXX=${CMAKE_CXX_COMPILER}")
    list(APPEND OPENMPI_ARGS "CXXFLAGS=${CXX_FLAGS}")

    # sudo apt-get install libopenmpi-dev openmpi-bin openmpi-common openmpi-doc

    ExternalProject_Add(openmpi
      URL "https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz"
      CONFIGURE_COMMAND cd <BINARY_DIR> && <SOURCE_DIR>/configure --srcdir=<SOURCE_DIR> ${OPENMPI_ARGS}
    )

    set(MPI_COMPILER "-DMPI_C_COMPILER=${CMAKE_INSTALL_PREFIX}/bin/mpicc" "-DMPI_CXX_COMPILER=${CMAKE_INSTALL_PREFIX}/bin/mpicxx")

    list(APPEND LIBRARIES "${CMAKE_INSTALL_PREFIX}/lib/libmpi_cxx.a")
    list(APPEND LIBRARIES "${CMAKE_INSTALL_PREFIX}/lib/libmpi.a")
    set(MPI_DEPENDS openmpi)
  else()
    find_package(MPI REQUIRED)
    if (MPI_CXX_FOUND)
      message(STATUS "FEM_SOLVER: using package ${TPL}")
      list(APPEND LIBRARIES ${MPI_CXX_LIBRARIES})
      list(APPEND INCLUDE_DIRS ${MPI_CXX_INCLUDE_PATH})
    endif()
    set(MPI_DEPENDS "")
  endif()

  list(APPEND HYPRE_ARGS ${MPI_COMPILER})
  list(APPEND HYPRE_ARGS "-DHYPRE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}")
  list(APPEND HYPRE_ARGS "-DHYPRE_USING_OPENMP=ON")

  ExternalProject_Add(hypre
    URL "https://computation.llnl.gov/projects/hypre-scalable-linear-solvers-multigrid-methods/download/hypre-2.10.0b.tar.gz"
    # CMAKE_ARGS ${FEM_ARGS}
    CONFIGURE_COMMAND ${CMAKE_COMMAND} ${FEM_ARGS} ${HYPRE_ARGS} <SOURCE_DIR>/src
    DEPENDS ${MPI_DEPENDS}
  )

  list(APPEND LIBRARIES "${CMAKE_INSTALL_PREFIX}/lib/libHYPRE.a")

  list(APPEND METIS_ARGS ${MPI_COMPILER})
  list(APPEND METIS_ARGS "-DGKLIB_PATH=<SOURCE_DIR>/GKlib")
  list(APPEND METIS_ARGS "-DOPENMP=ON")

  ExternalProject_Add(metis
    URL "http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/metis-5.1.0.tar.gz"
    CMAKE_ARGS ${FEM_ARGS} ${METIS_ARGS}
    DEPENDS ${MPI_DEPENDS}
  )

  list(APPEND LIBRARIES "${CMAKE_INSTALL_PREFIX}/lib/libmetis.a")
endif()

if (USE_MPI)
  list(APPEND MFEM_ARGS ${MPI_COMPILER})
  list(APPEND MFEM_ARGS "-DMETIS_DIR=${CMAKE_INSTALL_PREFIX}")
  list(APPEND MFEM_ARGS "-DHYPRE_DIR=${CMAKE_INSTALL_PREFIX}")
endif()
list(APPEND MFEM_ARGS "-DMFEM_USE_CUDA=${USE_CUDA}")
if (USE_CUDA)
  list(APPEND MFEM_ARGS "-DCUDA_ARCH=${CUDA_ARCH}")
endif()
list(APPEND MFEM_ARGS "-DMFEM_USE_MPI=${USE_MPI}")
list(APPEND MFEM_ARGS "-DMFEM_ENABLE_TESTING=ON")
list(APPEND MFEM_ARGS "-DMFEM_ENABLE_EXAMPLES=OFF")
list(APPEND MFEM_ARGS "-DMFEM_ENABLE_MINIAPPS=ON")
list(APPEND MFEM_ARGS "-DMFEM_USE_OPENMP=ON")
list(APPEND MFEM_ARGS "-DMFEM_THREAD_SAFE=ON")

if (USE_MPI)
  set(MFEM_DEPENDS hypre metis)
else()
  set(MFEM_DEPENDS "")
endif()

ExternalProject_Add(mfem
  # URL "http://mfem.github.io/releases/mfem-3.4.tgz"
  URL "https://github.com/mfem/mfem/archive/v4.0-rc2.tar.gz"
  CMAKE_ARGS ${FEM_ARGS} ${MFEM_ARGS}
  PATCH_COMMAND cd <SOURCE_DIR> && git apply ${CMAKE_SOURCE_DIR}/patches/Mfem.patch
  DEPENDS ${MFEM_DEPENDS}
)

list(APPEND LIBRARIES "${CMAKE_INSTALL_PREFIX}/lib/libmfem.a")

list(APPEND OPENCASCADE_ARGS "-DOCE_INSTALL_PREFIX=../install")
list(APPEND OPENCASCADE_ARGS "-DOCE_MULTITHREAD_LIBRARY=OPENMP")
list(APPEND OPENCASCADE_ARGS "-DOCE_TESTING=OFF")
list(APPEND OPENCASCADE_ARGS "-DOCE_VISUALISATION=OFF")
list(APPEND OPENCASCADE_ARGS "-DOCE_ADD_HEADERS=ON")
list(APPEND OPENCASCADE_ARGS "-DOCE_BUILD_SHARED_LIB=OFF")
list(APPEND OPENCASCADE_ARGS "-DOCE_BUILD_STATIC_LIB=ON")
list(APPEND OPENCASCADE_ARGS "-DOCE_DISABLE_X11=OFF")

# ExternalProject_Add(opencascade
#   URL "https://github.com/tpaviot/oce/archive/OCE-0.18.3.tar.gz"
#   CMAKE_ARGS ${FEM_ARGS} ${OPENCASCADE_ARGS}
#   DEPENDS metis
# )

list(APPEND NETGEN_ARGS "-DUSE_MPI=${USE_MPI}")
list(APPEND NETGEN_ARGS "-DUSE_PYTHON=OFF")
list(APPEND NETGEN_ARGS "-DUSE_GUI=OFF")
list(APPEND NETGEN_ARGS "-DUSE_OCC=ON")

# list(APPEND NETGEN_ARGS "--prefix=${CMAKE_INSTALL_PREFIX}")
# list(APPEND NETGEN_ARGS "--disable-gui")
# list(APPEND NETGEN_ARGS "--enable-parallel")
# list(APPEND NETGEN_ARGS "--disable-shared")
# list(APPEND NETGEN_ARGS "--enable-static")
# list(APPEND NETGEN_ARGS "--enable-nglib")
# list(APPEND NETGEN_ARGS "--with-metis=${CMAKE_INSTALL_PREFIX}")
# list(APPEND NETGEN_ARGS "CC=/usr/bin/mpicc")
# list(APPEND NETGEN_ARGS "CXX=/usr/bin/mpicxx")

# ExternalProject_Add(netgen
#   # URL "https://netcologne.dl.sourceforge.net/project/netgen-mesher/netgen-mesher/5.3/netgen-5.3.1.tar.gz"
#   # CONFIGURE_COMMAND cd <BINARY_DIR> && <SOURCE_DIR>/configure --srcdir=<SOURCE_DIR> ${NETGEN_ARGS}
#   URL "https://github.com/NGSolve/netgen/archive/v6.2.1810.tar.gz"
#   CMAKE_ARGS ${FEM_ARGS} ${NETGEN_ARGS}
#   DEPENDS metis opencascade
# )

# list(APPEND PLASM_ARGS "CXX=/usr/bin/mpicxx")

# ExternalProject_Add(plasm
#   URL "http://www.plasm.net/download/latest-classic-release-51/sources.tgz"
#   CONFIGURE_COMMAND ""
# )

list(APPEND GLVIS_ARGS "-DMFEM_DIR=${CMAKE_INSTALL_PREFIX}")

ExternalProject_Add(glvis
  URL "http://glvis.github.io/releases/glvis-3.4.tgz"
  CMAKE_ARGS ${FEM_ARGS} ${GLVIS_ARGS}
  DEPENDS mfem
)

if (USE_MPI)
  list(APPEND FEM_SOLVER_ARGS ${MPI_COMPILER})
  list(APPEND FEM_SOLVER_ARGS "-DMETIS_DIR=${CMAKE_INSTALL_PREFIX}")
  list(APPEND FEM_SOLVER_ARGS "-DHYPRE_DIR=${CMAKE_INSTALL_PREFIX}")
endif()
list(APPEND FEM_SOLVER_ARGS "-DMFEM_DIR=${CMAKE_INSTALL_PREFIX}")
list(APPEND FEM_SOLVER_ARGS "-DUSE_CUDA=${USE_CUDA}")
if (USE_CUDA)
  list(APPEND FEM_SOLVER_ARGS "-DCUDA_ARCH=${CUDA_ARCH}")
endif()
list(APPEND FEM_SOLVER_ARGS "-DUSE_MPI=${USE_MPI}")

ExternalProject_Add(fem_solver
  DOWNLOAD_COMMAND ""
  SOURCE_DIR ${PROJECT_SOURCE_DIR}/FemSolver
  CMAKE_ARGS ${FEM_ARGS} ${FEM_SOLVER_ARGS}
  DEPENDS mfem
)
